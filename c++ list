#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Task structure
struct Task {
    string description;
    bool completed;

    Task(string desc) : description(desc), completed(false) {}
};

int main() {
    vector<Task> tasks;

    while (true) {
        cout << "To-Do List Manager" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Quit" << endl;
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter task description: ";
                cin.ignore(); // Clear input buffer
                string description;
                getline(cin, description);
                tasks.push_back(Task(description));
                cout << "Task added: " << description << endl;
                break;
            case 2:
                if (tasks.empty()) {
                    cout << "No tasks to display." << endl;
                } else {
                    cout << "Tasks:" << endl;
                    for (size_t i = 0; i < tasks.size(); ++i) {
                        cout << "[" << (tasks[i].completed ? "X" : " ") << "] " << i + 1 << ". " << tasks[i].description << endl;
                    }
                }
                break;
            case 3:
                if (tasks.empty()) {
                    cout << "No tasks to mark as completed." << endl;
                } else {
                    cout << "Enter the index of the task to mark as completed: ";
                    int index;
                    cin >> index;
                    if (index >= 1 && index <= static_cast<int>(tasks.size())) {
                        tasks[index - 1].completed = true;
                        cout << "Task " << index << " marked as completed." << endl;
                    } else {
                        cout << "Invalid task index." << endl;
                    }
                }
                break;
            case 4:
                if (tasks.empty()) {
                    cout << "No tasks to remove." << endl;
                } else {
                    cout << "Enter the index of the task to remove: ";
                    int index;
                    cin >> index;
                    if (index >= 1 && index <= static_cast<int>(tasks.size())) {
                        tasks.erase(tasks.begin() + index - 1);
                        cout << "Task " << index << " removed." << endl;
                    } else {
                        cout << "Invalid task index." << endl;
                    }
                }
                break;
            case 5:
                cout << "Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
